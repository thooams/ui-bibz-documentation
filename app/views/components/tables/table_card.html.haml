= title 'Table Card', logo_name: 'ui bibz'
%blockquote UiBibz::Ui::Ux::Tables::TableCard
.bd-callout
  %p
    The
    %code table_card
    component is a mix between a #{ link_to 'table', components_tables_table_path } and a #{ link_to 'card', components_boxes_card_path } component.<br/>
    %br
    Pagination and search are integrated to the component

  %p
    The pagination is managed through the gem #{ link_to 'will_paginate', 'https://github.com/mislav/will_paginate', target: '_blank', rel: "noopener" }.
    %br
    The methods of `will_paginate` work with the
    %code table
    component such as
    %code per_page
    \.

= code do
  :plain
    # by variable
    ui_table_card options, html_options

    # or by block tapped
    ui_table_card options, html_options do |t|
      t.columns do |cls|
        cls.column data_index, options, html_options
      end
      t.actions do |acs|
        acs.link content, options, html_options
      end
    end

= component_options do |co|
  - co.inherit_options_links except: %i(glyph popover state size status tooltip)
  - co.list 'store', types: 'object', required: true
  - co.list 'searchable', types: 'boolean'
  - co.list 'paginable', types: 'boolean'
  - co.list 'title', types: 'string'
  - co.list 'table_html_options', types: 'hash'
  - co.list 'table_options', types: 'hash' do |cu|
    - cu.list 'actionable', types: 'boolean'
    - cu.list 'sortable', types: 'boolean'
    - cu.list 'default_actions', types: 'boolean'
    - cu.list 'thead', types: 'hash', values: 'status: [:inverse || :default]'
    - cu.list 'bordered', types: 'boolean'
    - cu.list 'hoverable', types: 'boolean'
    - cu.list 'responsive', types: 'boolean', description: "Generate a div wrapper for a responsive table"
    - cu.list 'breakpoint', types: 'symbol', values: %w(:sm :md :lg :xl :xxl), description: "Need option <code>responsive: true</code> to work"

= component_items do |ci|
  - ci.inherit_component "columns"
  - ci.inherit_component "actions"
  - ci.html_link

- @sections = sections do |s|

  - s.section title: "Model" do

    %p You must include UiBibz Searchable Concern and list searchable fields through <code>searchable_attributes</code> method. Insert in the model the following line :
    = example do |c|
      - c.code do
        :plain
          class User < ActiveRecord::Base
            include UiBibz::Concerns::Models::Searchable
            ...
            # in User table
            searchable_attributes :email, :name
            # or in join table
            searchable_attributes :name, company: :email
            # or in join table with multi columns
            searchable_attributes :name, company: [:email, :active]
            # or with build column with :as argument
            searchable_attributes :name, company: :email, as: :mybuildcolumn
            ...
          end

  - s.section title: "Controller" do
    :markdown
      Use the method in your model `table_search_pagination` passing arguments :

    = component_list_options do |clo|
      - clo.list 'params', types: :hash, order: 1
      - clo.list 'session', types: :hash, order: 2
      - clo.list 'options', types: :hash, order: 3 do |cl|
        - cl.list 'actions_controller', types: 'string', description: 'To change the record actions if they aren’t the same than the current controller', default: "params[:controller]"
        - cl.list 'store_id', types: 'string', description: 'To add a specific id to the store', default: "params[:controller]"
        - cl.list 'per_page', types: 'integer', description: 'Force by defaut a per_page number', default: 30
        - cl.list 'model', types: ['string', 'object'], description: 'Force a specific model'
        - cl.list 'sortable', types: 'boolean', description: 'Enable or disable the sortable feature', default: 'true'

    = example do |c|
      - c.code do
        class UserController < ApplicationController
          def index
            @users = User.table_search_pagination(params, session, options)
            ...
          end
          ...
        end

  - s.section title: "View" do
    :markdown
      The columns are all displayed by default and the default actions are :

      * show
      * edit
      * delete

    = example do |c|
      - c.header do
        = ui_table_card(store: @users, table_options: {class: 'table-responsive'}) do |b|
          - b.columns do |cls|
            - cls.column :id
            - cls.column :email
            - cls.column :active
            - cls.column :company
            - cls.column :created_at
            - cls.column :updated_at
          - b.actions do |acs|
            - acs.link 'Show', url: '#show', glyph: 'eye'
            - acs.link 'Edit', url: '#show', glyph: 'pencil-alt'
            - acs.link 'Delete', url: '#show', glyph: 'trash',  link_html_options: { data: { confirm: 'Are you sure?' }}
      - c.code do
        ui_table_card(store: @users)
      - c.html do
        <form action="/components/tables_cards" accept-charset="UTF-8" method="get">
          <input name="utf8" type="hidden" value="✓">
          <div class="card-header">
            <div class="title">Components list</div>
            <div class="input-group input-group-sm table-search-field">
              <span class="input-group-addon"><i class="glyph fa fa-search"></i></span>
              <input type="search" name="search" class="form-control" placeholder="Search by Name...">
              <span class="clear-search-btn input-group-addon"><i class="glyph fa fa-times-circle"></i></span>
            </div>
            <br class="ui-bibz-clear">
          </div>
          <table class="table table-responsive">
            <thead>
              <tr>
                <th>
                  <a class="dropup" href="/components/tables_cards?action=tables_cards&amp;column_id=id&amp;direction=asc&amp;sort=users.id">Id</a>
                </th>
                <th>
                  <a class="dropup" href="/components/tables_cards?action=tables_cards&amp;column_id=email&amp;direction=asc&amp;sort=users.email">Email</a>
                </th>
                <th>
                  <a class="dropup" href="/components/tables_cards?action=tables_cards&amp;column_id=active&amp;direction=asc&amp;sort=users.active">Active</a>
                </th>
                <th>
                  <a class="dropup" href="/components/tables_cards?action=tables_cards&amp;column_id=company&amp;direction=asc&amp;sort=users.company">Company</a>
                </th>
                <th>
                  <a class="dropup" href="/components/tables_cards?action=tables_cards&amp;column_id=created_at&amp;direction=asc&amp;sort=users.created_at">Created At</a>
                </th>
                <th>
                  <a class="dropup" href="/components/tables_cards?action=tables_cards&amp;column_id=updated_at&amp;direction=asc&amp;sort=users.updated_at">Updated At</a>
                </th>
                <th class="action"></th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>1</td>
                <td>test0@test.com</td>
                <td>true</td>
                <td>Company test 6646</td>
                <td>2015-09-04 08:24:05 UTC</td>
                <td>2015-09-04 08:24:05 UTC</td>
                <td>
                  <div class="dropdown-action btn-group dropdown" role="group">
                    <button class="btn btn-primary btn-xs dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="glyph fa fa-ellipsis-v fa-fw"></i> Actions <span class="caret"></span></button>
                    <div class="dropdown-menu dropdown-menu-right">
                      <a class="dropdown-item" href="#show"><i class="glyph fa fa-eye"></i> Show</a>
                      <a class="dropdown-item" href="#show"><i class="glyph fa fa-pencil-alt"></i> Edit</a>
                      <a class="dropdown-item" data-confirm="Are you sure?" href="#show"><i class="glyph fa fa-trash"></i> Delete</a>
                    </div>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
          <div class="card-footer">
            <ul class="pagination pagination">
              <li class="prev disabled"><span>← Previous</span></li>
              <li class="active"><span>1</span></li>
              <li><a rel="next" href="/components/tables_cards?page=2">2</a></li>
              <li><a href="/components/tables_cards?page=3">3</a></li>
              <li><a href="/components/tables_cards?page=4">4</a></li>
              <li><a href="/components/tables_cards?page=5">5</a></li>
              <li><a href="/components/tables_cards?page=6">6</a></li>
              <li><a href="/components/tables_cards?page=7">7</a></li>
              <li><a href="/components/tables_cards?page=8">8</a></li>
              <li><a href="/components/tables_cards?page=9">9</a></li>
              <li class="disabled"><span>…</span></li>
              <li><a href="/components/tables_cards?page=29">29</a></li>
              <li><a href="/components/tables_cards?page=30">30</a></li>
              <li class="next"><a rel="next" href="/components/tables_cards?page=2">Next →</a></li>
            </ul>
            <input name="utf8" type="hidden" value="✓">
            <div class="table-pagination-per-page">
              Displaying User <b>1&nbsp;-&nbsp;5</b> of <b>150</b> in total | Per page: <select name="per_page" id="per_page" class="form-control">
              <option selected="selected" value="5">5</option>
              <option value="10">10</option>
              <option value="20">20</option>
              <option value="30">30</option>
              <option value="50">50</option>
              <option value="100">100</option>
              <option value="200">200</option>
              <option value="500">500</option>
              </select>
            </div>
            <br class="ui-bibz-clear">
          </div>
        </form>

  - s.section title: "Controller arguments" do
    :markdown
      If we wish, for example, count users who have no direct link with the documents. Imagine, for example, a user with products and that these products contain several documents. We wish to count the number of users by documents.
      We can add arguments in the method `table_search_pagination` that will help to make joints.
    = example do |c|
      - c.code do
        :plain
          Arguments  = { sortable: {
            controller: "users",
            column: 'users',
            count:  true,
            joins: "LEFT OUTER JOIN documents_products ON documents_products.document_id = documents.id
                    LEFT OUTER JOIN products ON products.id = documents_products.product_id
                    LEFT OUTER JOIN products_users ON products_users.product_id = products.id
                    LEFT OUTER JOIN users ON users.id = products_users.user_id"
          } }

          @documents = Document.includes(:users).table_search_pagination(params, session, arguments)
    :markdown
      Here the sortable argument means that one wishes to interresser the sorting functionality.
      For that it is necessary :

      * define the name of the column sorted through the argument column (`String`)
      * determine whether the treatment is done on counting with the count argument (`Boolean`)
      * define the join along with the argument (`String , Array , Hash`)

    = example do |c|
      - c.code do
        ui_table store: @documents do |g|
          g.columns do |c|
            c.column :users, { name: 'Users count', count: true, custom_sort: true }
          end
        end

    .bd-callout
      %p For more examples, see the the #{link_to("table component", components_tables_table_path)} examples with lot of table_options...

= @sections.render
