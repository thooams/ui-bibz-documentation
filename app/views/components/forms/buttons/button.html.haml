= title 'Button', url: bootstrap_start_url("components/buttons/")
%blockquote UiBibz::Ui::Core::Forms::Buttons::Button
%p.bd-callout Use Bootstrap’s custom button styles for actions in forms, dialogs, and more. Includes support for a handful of contextual variations, sizes, states, and more.

= code "ui_button"

= component_options do |co|
  - co.inherit_options_links
  - co.list 'outline', types: 'boolean'
  - co.list 'text', types: 'boolean'
  - co.list 'toggle', types: 'boolean'
  - co.list 'shortcut', types: 'string', description: "To show shortuct in the title"
  - co.list 'badge', types: %w(hash string), description: "(use component #{ link_to('badge',components_boxes_card_path) } method)"

- @sections = sections do |s|
  - s.section title: "Status" do
    = status_description
    = example do |c|
      - c.header do
        = ui_button 'Normal'
        - UiBibzApp::Application::STATUSES.each do |status|
          = ui_button status.to_s.titleize, status: status
        = ui_button 'Link', status: :link
      - c.code do
        ui_button 'Normal'
        - UiBibzApp::Application::STATUSES.each do |status|
          = "ui_button '#{ status.to_s.titleize }', status: :#{status}".html_safe
        ui_button 'Link', status: :link
      - c.html do
        <button class="btn">Normal</button>
        <button class="btn-primary btn">Primary</button>
        <button class="btn-secondary btn">Secondary</button>
        <button class="btn-success btn">Success</button>
        <button class="btn-danger btn">Danger</button>
        <button class="btn-warning btn">Warning</button>
        <button class="btn-info btn">Info</button>
        <button class="btn-light btn">Light</button>
        <button class="btn-dark btn">Dark</button>
        <button class="btn-link btn">Link</button>

  - s.section title: "Outline", tag: :h3 do
    :markdown
      The background color of the buttons can be removed through the `outline` option that has for a Boolean argument.
    = example do |c|
      - c.header do
        - UiBibzApp::Application::STATUSES.each do |status|
          = ui_button status.to_s.titleize, status: status.to_sym, outline: true
      - c.code do
        - UiBibzApp::Application::STATUSES.each do |status|
          = "ui_button '#{ status.to_s.titleize }', status: :#{status}, outline: true".html_safe
      - c.html do
        <button class="btn-outline btn">Normal</button>
        <button class="btn-outline-primary btn">Primary</button>
        <button class="btn-outline-secondary btn">Secondary</button>
        <button class="btn-outline-success btn">Success</button>
        <button class="btn-outline-danger btn">Danger</button>
        <button class="btn-outline-warning btn">Warning</button>
        <button class="btn-outline-info btn">Info</button>
        <button class="btn-outline-light btn">Light</button>
        <button class="btn-outline-dark btn">Dark</button>

  - s.section title: "Size", tag: :h3 do
    = size_description
    = example do |c|
      - c.header do
        = ui_button 'Large button', status: :primary, size: :lg
        = ui_button 'Medium button', status: :primary, size: :md
        = ui_button 'Small button', status: :primary, size: :sm
      - c.code do
        ui_button "Large button", status: :primary, size: :lg
        ui_button "Medium button", status: :primary, size: :md
        ui_button "Small button", status: :primary, size: :sm
      - c.html do
        <button class="btn-primary btn btn-lg">Large button</button>
        <button class="btn-primary btn">Medium button</button>
        <button class="btn-primary btn btn-sm">Small button</button>

  - s.section title: "block", tag: :h3 do
    :markdown
      Buttons can be presented as a block through the class `.d-grid`.
    = example do |c|
      - c.header do
        .d-grid.gap-2
          = ui_button 'Block level button', status: :primary, type: :block
          = ui_button 'Block level button', status: :secondary, type: :block
        %br
        .d-grid.gap-2.d-md-block
          = ui_button 'Block level button', status: :primary, type: :block
          = ui_button 'Block level button', status: :secondary, type: :block
      - c.code do
        :plain
          <div class="d-grid gap-2">
            ui_button "Block level button", status: :primary, type: :block
            ui_button "Block level button", status: :secondary, type: :block
          </div>
          <div class="d-grid gap-2 d-md-block">
            ui_button "Block level button", status: :primary, type: :block
            ui_button "Block level button", status: :secondary, type: :block
          </div>
      - c.html do
        :plain
          <div class="d-grid gap-2 d-md-block">
            <button class="btn-primary btn btn-block">Block level button</button>
            <button class="btn-secondary btn btn-block">Block level button</button>
          </div>
          <div class="d-grid gap-2 d-md-block">
            <button class="btn-primary btn btn-block">Block level button</button>
            <button class="btn-secondary btn btn-block">Block level button</button>
          </div>

  - s.section title: "State", tag: :h3 do
    :markdown
      The buttons inherits the `state` option, this option is in element [component] (../components/)
      This option lets you disable or enable the element about through these two arguments :

      * :active
      * :disabled

    = example do |c|
      - c.header do
        = ui_button 'Primary', status: :primary, state: :active
        = ui_button 'Primary', status: :primary, state: :disabled
      - c.code do
        ui_button "Primary", status: :primary, state: :active
        ui_button "Primary", status: :primary, state: :disabled
      - c.html do
        <button class="active btn-primary btn">Primary</button>
        <button class="disabled btn-primary btn">Primary</button>

  - s.section title: "Options and html options" do
    :markdown
      Like the [component] (../ components/), the `bouton` element can be written in two ways :

      * in line
      * in block

    = example do |c|
      - c.header do
        = ui_button 'Primary Active', status: :primary, state: :active, shortcut: 'Shift + P'
        = ui_button 'Toggle Danger', { status: :danger, glyph: :gem, toggle: true }, { class: 'button' }
        = ui_button 'Text', glyph: 'gem', status: :success, text: false
        = ui_button({ badge: 2, status: :success }, { class: 'button' }) do
          = 'Info'
        = ui_button 'Warning', status: :warning, badge: { corner: true, content: 3, type: :pill, status: :danger }, class: "ms-1 position-relative"
      - c.code do
        ui_button "Primary Active", status: :primary, state: :active
        ui_button "Toggle Danger", { status: :danger, glyph: :gem, toggle: true }, { class: "button" }
        ui_button "Text", glyph: "gem", status: :success, text: false
        ui_button({ status: :success, badge: 2 }, { class: "button" }) do
          Info
        end
        ui_button 'Warning', status: :warning, badge: { corner: true, content: 3, type: :pill, status: :danger }, class: "position-relative"

      - c.html do
        :plain
          <button class="active btn-primary btn" role="button">Primary Active</button>
          <button class="button btn-danger btn" role="button" data-bs-toggle="button" aria-pressed="false" autocomplete="off">
            <i class="glyph fa fa-gem"></i> Toggle Danger
          </button>
          <button class="btn-success btn without-text"><i class="glyph fa fa-gem"></i> &nbsp;</button>
          <button class="button btn" role="button">
            Info<span class="badge-secondary badge">2</span>
          </button>
          <button class="btn-warning btn">Warning<span class="badge-danger badge badge-pill">3</span></button>

= @sections.render
