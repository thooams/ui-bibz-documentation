= title 'Component', display_ui: false
%blockquote UiBibz::Ui::Core::Component
.bd-callout
  %p
    The component is the core of Ui Bibz.
    %br
    Each element of the framework inherits from
    %code component
    element.
    %br
    It may contain three arguments :

  %ul
    %li content (variable or block)
    %li= "options (hash <default: {}>)"
    %li= "html_options (hash <default: {}>)"

- @sections = sections do |s|
  - s.section title: "Component" do
    %p
      A component can be write with a <strong>variable</strong> or a <strong>block</strong>.
      %br
      Content, options or html_options can be <code>nil</code>.
      %br
      <strong>Important:</strong> The position of <code>options</code> and <code>html_options</code> change when content is passed by variable or by block.

    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new content, options, html_options

          # By block
          Component.new(options, html_options) do
            content
          end

  - s.section title: "Render method" do
    :markdown
      The `render` method generates the html code of the component.
    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new('My content', { status: :primary }, { class: 'my-class' }).render

          # By block
          Component.new({ size: :xs }, { id: 'my-id' }) do
            My content
          end.render

  - s.section title: "Size" do
    = size_description
    = example do |c|
      - c.code do
        - UiBibzApp::Application::SIZES.each do |size|
          = "Component.new content, size: :#{ size }"

  - s.section title: "Status" do
    :markdown
      Some component may have the `status` option in their settings.
      This option lets you change the color of the item as specified in [the bootstrap documentation](https://getbootstrap.com/docs/4.0/components/buttons/).

    = status_description
    = example do |c|
      - c.code do
        - UiBibzApp::Application::STATUSES.each do |status|
          = "Component.new content, status: :#{ status }"

  - s.section title: "Glyph" do
    :markdown
      Some component may have the `glyph` option in their settings.
      This option lets you add a glyph to its component.
      You can write the value of this argument in many ways, for this, please refer to the component [glyph](../components/glyph).

    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new content, glyph: 'star'

          # By block
          Component.new glyph: { name: 'star', size: 2, type: 'fw', label: 'gem' } do
            content
          end


  - s.section title: "Popover" do
    %p
      Some component may have the <code>popover</code> option in their settings like buttons, links, ...
      %br
      This option lets you add a popover to its component by object, hash or string.
      %br
      See #{ link_to "the popover component", components_notifications_popover_path }.

    = component_list_options do |co|
      - co.list 'position', types: 'symbol', values: %w(:auto :top :left :right :bottom), description: "How to position the popover"
      -UiBibz::Ui::Core::Notifications::Popover::DATA_ATTRIBUTES.each do |mth|
        - co.list mth
    %p Documentation for popover options are in #{ link_to("bootstrap documentation", bootstrap_start_url("components/popovers/#options"), target: "_blank", rel: "noopener") }.
    = example do |c|
      - c.code do
        :plain
          # By object
          popover = UiBibz::Ui::Core::Notifications::Popover.new('My popover text...', title: 'My popover title')
          Component.new content, popover: popover

          # By hash
          Component.new content, popover: { content: 'My popover text...', title: 'My Title', ... }

          # By string
          Component.new content, popover: 'My popover text...'

  - s.section title: "Tooltip" do
    %p
      Some component may have the <code>tooltip</code> option in their settings like buttons, links, ...
      %br
      This option lets you add a tooltip to its component by object, hash or boolean.
      %br
      See #{ link_to "the tooltip component", components_notifications_tooltip_path }.

    = component_list_options do |co|
      - co.list 'position', types: 'symbol', values: %w(:auto :top :left :right :bottom), description: "How to position the popover"
      - UiBibz::Ui::Core::Notifications::Tooltip::DATA_ATTRIBUTES.each do |mth|
        - co.list mth

    %p Documentation for popover options are in #{ link_to("bootstrap documentation", bootstrap_start_url("components/tooltips/#options"), target: "_blank", rel: "noopener") }.

    = example do |c|
      - c.code do
        :plain
          # By object
          tooltip = UiBibz::Ui::Core::Notifications::Tooltip.new('My popover text...')
          Component.new content, tooltip: tooltip

          # By hash
          Component.new content, tooltip: { content: 'My popover text...', title: 'My Title', ... }

          # By boolean
          Component.new content, { tooltip: true }, { title: 'My popover text...' }
          # or
          Component.new content, tooltip: true, text: false

  - s.section title: "State" do
    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new content, state: :active

          # By block
          Component.new state: :disabled do
            content
          end

  - s.section title: "Cache" do
    %p You can cache your component thanks to rails #{ link_to 'cache', 'https://guides.rubyonrails.org/caching_with_rails.html', target: "_blank", rel: "noopener" } options.
    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new content, cache: "my-component-cache-\#{ Date.today }"

          # By block
          Component.new cache: "my-static-component-cache" do
            content
          end

  - s.section title: "Stimulus options" do
    %p Ui Bibz can use #{ link_to "stimulus", "https://stimulusjs.org/", target: "_blank", rel: "noopener" } with these options:
    %ul.list-options
      %li
        controller
        %span.option-types [String]
      %li
        action
        %span.option-types [String]
      %li
        target
        %span.option-types [String]
    = example do |c|
      - c.code do
        :plain
          Component.new controller: "hello" do
            Component.new 'My sub component', target: 'hello.name'
            Component.new 'My sub component 2', action: 'click->hello#greet'
          end

  - s.section title: "Turbo" do
    %p
      Disable turbo for some components:
      #{link_to("data-turbo='false'", 'https://turbo.hotwired.dev/handbook/drive#disabling-turbo-drive-on-specific-links-or-forms', target: "_blank", rel: "noopener") }

    = example do |c|
      - c.code do
        :plain
          = ui_link "My link", url: "my-link.html", turbo: false

  - s.section title: "Html options" do
    %p You can add any html properties.
    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new content, nil, { class: 'my-component', data: { level: 'first' }}

          # By block
          Component.new({}, { id: 'my-id' }) do
            content
          end

  - s.section title: "Tips" do
    :markdown
      Key `class:` can be inserted in `html_options` and in `options` too.<br/>
      This solution was added to simplify writing of the component.
    = example do |c|
      - c.code do
        :plain
          # By variable
          Component.new content, { size: :xs }, { class: 'my-component' }
          Component.new content, class: 'my-component', size: :xs

          # By block
          Component.new class: 'my-component', size: :xs do
            content
          end

  - s.section title: "Custom Component" do
    %p You can create your own components into your application.
    %p For more information, see #{ link_to 'Custom Component page', custom_component_path}

= @sections.render
